import 'dotenv/config';
import { Telegraf, Markup } from 'telegraf';
import pkg from 'telegraf/filters';

const { message, chatType } = pkg;

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) throw new Error('BOT_TOKEN is required in .env');


const ADMIN_GROUP_ID = Number(process.env.ADMIN_GROUP_ID);
if (!ADMIN_GROUP_ID) throw new Error('ADMIN_GROUP_ID is required in .env');

const GROUP_ID = Number(process.env.GROUP_ID);
if (!GROUP_ID) throw new Error('GROUP_ID is required in .env');

const TIME_LIMIT_MINUTES = Number(process.env.TIME_LIMIT_MINUTES || 10);

const ADMIN_IDS = process.env.ADMIN_IDS?.split(/[\s,]+/).map(v => Number(v)) || []

console.log("–ê–¥–º–∏–Ω—ã:", ADMIN_IDS.toString())

// === –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ ===
/** userId -> { username, first_name, last_name, agreed, approved, join_time, request_count } */
const userRequests = new Map();
/** userId -> Date */
const userJoinTimes = new Map();
/** userId -> boolean (–Ω–∞–ø–∏—Å–∞–ª –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?) */
const userFirstMessages = new Map();
/** userId -> { link, created_at: Date, used: boolean, used_at?: Date } */
const userInviteLinks = new Map();
/** userId -> NodeJS.Timeout (—Ç–∞–π–º–µ—Ä –Ω–∞ –±–∞–Ω –∑–∞ –º–æ–ª—á–∞–Ω–∏–µ) */
const silenceTimers = new Map();
const answerGate = new Map();

console.log('üîë BOT_TOKEN –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞...');
const bot = new Telegraf(BOT_TOKEN);

// === –£—Ç–∏–ª–∏—Ç—ã ===
const isAdmin = (userId) => ADMIN_IDS.includes(Number(userId));

const rulesText = `
<b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è.</b>

1. –ß–∞—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —é–º–æ—Ä–∞ 18+, –¥—Ä—É–∂–µ—Å–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –ª—é–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∏ –¥–æ–º–∞—à–Ω–µ–π —ç—Ä–æ—Ç–∏–∫–∏.
2. –ß–∞—Ç —Å—Ç—Ä–æ–≥–æ 18+. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∫—Ä–∞—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, –≤ —Ç–æ–º —á–∏—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º 18+, –∏–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ.
–ó–∞–π—Ç–∏ –∏ "–ü—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å" –Ω–µ –≤—ã–π–¥–µ—Ç :)
3. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –æ–±—â–µ–Ω–∏–∏. –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –¥–Ω–µ–π –∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω.
4. –ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ç –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö, –Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —á–∞—Ç–∞.
5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.

<b>–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.</b>

1. –û–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–±–æ–ª—å—à–µ 5 —à—Ç—É–∫ –ø–æ–¥—Ä—è–¥), —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∫–∞—Ä–∞—é—Ç—Å—è –º—å—é—Ç–æ–º. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å–ª–µ–¥—É–µ—Ç –±–∞–Ω.
2. –û–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ, —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∞–≤–∏–ª–∞ —ç—Ç–∏–∫–∏ –∏ –ª–µ–∫—Å–∏–∫–∏.
3. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –¥–ª—è –≤—Å–µ–æ–±—â–µ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞ —Å–ª–µ–¥—É–µ—Ç –ø—Ä—è—Ç–∞—Ç—å –∑–∞ —à—Ç–æ—Ä–∫—É/—Å–ø–æ–π–ª–µ—Ä.
4. –ì–æ—Ä—è—á–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –∑–∞–∫—Ä–µ–ø–µ.

<b>–ó–∞–ø—Ä–µ—Ç—ã –∏ –±–∞–Ω—ã.</b>

1. –í —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —Ä–æ–¥–∞ —Ä–∞—Å–æ–≤–æ–π, –ø–æ–ª–æ–≤–æ–π –∏ –ø—Ä–æ—á–µ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏.
2. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç –Ω–∏—Ö –≤ —á–∞—Ç–µ: –ø—Ä–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –∂–∞–ª–æ–±–∞—Ö –∏–¥—ë—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ ‚Äî –±–∞–Ω.
3. –í —á–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–µ—â–∞—é—â–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫—É –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä.
–ù–æ! –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ª—é–±–æ–≥–æ —Ä–æ–¥–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ —á–∞—Ç–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –ª—é–±–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ —Å—Ä–µ–¥—Å—Ç–≤–∞–º —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏ —Ç–¥.
4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–º–æ–≤, –∫–∞—Ä—Ç–∏–Ω–æ–∫, –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–≤, —Ñ–æ—Ç–æ, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç—Å–∫–æ–π —ç—Ä–æ—Ç–∏–∫–æ–π/–ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏ –∫–∞—Ä–∞–µ—Ç—Å—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–º –±–∞–Ω–æ–º.
5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–Ω –∏–ª–∏ –º—å—é—Ç –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ –∑–∞ –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.
–ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ :)

–ü—Ä–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤ —á–∞—Ç –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω–∏-–∞–Ω–∫–µ—Ç—É –æ —Å–µ–±–µ, –∏ —Å–∫–∏–Ω—É—Ç—å –Ω—é–¥—Å –∏–ª–∏ –º–µ–º 18+. –í –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞.

‚ö†‚ö†‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É (–∏–º—è, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥, —Ñ–æ—Ç–æ –∏–ª–∏ –º–µ–º 18+) –≤ —Ç–µ—á–µ–Ω–∏–µ ${TIME_LIMIT_MINUTES} –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç–µ –∑–∞–±–∞–Ω–µ–Ω—ã. ‚ö†‚ö†‚ö†

<b>–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã.</b>
`;

bot.start(async (ctx) => {
    if (ctx.chat.type !== 'private') return;

    const user = ctx.from;

    answerGate.set(user.id, { waiting: true });

    userRequests.delete(user.id);
    userInviteLinks.delete(user.id);

    await ctx.reply(
        `–ü–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ü–∏—Ç–∞—Ç—ã:\n\n–£–±–ª—é–¥–æ–∫, –º–∞—Ç—å —Ç–≤–æ—é, –∞ –Ω—É, –∏–¥–∏ —Å—é–¥–∞, **** ******, –∞? –°–¥—É—Ä—É —Ä–µ—à–∏–ª –∫–æ –º–Ω–µ –ª–µ–∑—Ç—å, —Ç—ã? –ó–∞—Å—Ä–∞–Ω–µ—Ü –≤–æ–Ω—é—á–∏–π, –º–∞—Ç—å —Ç–≤–æ—é...`,
        { parse_mode: 'HTML' }
    );
});

bot.on(message('text'), async (ctx, next) => {
    if (ctx.chat.type !== 'private') return next();

    const user = ctx.from;

    const isCorrect = String(ctx.message.text).trim().toLowerCase() === "–≥–æ–≤–Ω–æ —Å–æ–±–∞—á—å–µ";

    if (!isCorrect) {
        await ctx.reply('‚ùå –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        return;
    }

    answerGate.delete(user.id);

    const prev = userRequests.get(user.id) || {};
    const requestCount = (prev.request_count || 0) + 1;

    userRequests.set(user.id, {
        username: user.username,
        first_name: user.first_name,
        last_name: user.last_name,
        agreed: false,
        approved: false,
        join_time: null,
        request_count: requestCount,
        extra_answer: null,
        status: 'pending',
    });

    await ctx.reply(
        '‚úÖ –í–µ—Ä–Ω–æ! –ù–∏–∂–µ ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∏ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
    );

    await ctx.reply(rulesText, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
            Markup.button.callback('‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –Ω–∞–ø–∏—à—É –∞–Ω–∫–µ—Ç—É –ø—Ä–∏ –≤—Ö–æ–¥–µ', `agree_rules`),
        ]),
    });
});

// === –ö–Ω–æ–ø–∫–∞ "—Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏" ===
bot.action('agree_rules', async (ctx) => {
    const user = ctx.from;

    const data = userRequests.get(user.id) || {
        username: user.username,
        first_name: user.first_name,
        last_name: user.last_name,
        request_count: 0,
    };
    data.agreed = true;
    data.request_count = (data.request_count || 0) + 1;
    userRequests.set(user.id, data);

    // –ì–µ–Ω–µ—Ä–∏–º –Ω–æ–≤—É—é –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é)
    const invite = await generateNewInviteLink(ctx, user.id);

    await ctx.editMessageText('‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏! –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞–º
    await sendRequestToAdmins(ctx, user.id, invite?.invite_link);
});

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ ===
async function generateNewInviteLink(ctx, userId) {
    try {
        const name = `invite_${userId}_${new Date().toLocaleTimeString('ru-RU', { hour12: false })}`;
        const invite = await ctx.telegram.createChatInviteLink(GROUP_ID, {
            member_limit: 1,
            creates_join_request: false,
            name,
        });

        userInviteLinks.set(userId, {
            link: invite.invite_link,
            created_at: new Date(),
            used: false,
        });

        return invite;
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏:', e);
        return null;
    }
}

// === –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º ===
async function sendRequestToAdmins(ctx, userId, inviteLink) {
    const u = userRequests.get(userId);
    if (!u) return;

    let text = [
        'üîî <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É</b>',
        '',
        '<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>',
        `‚îú ID: <code>${userId}</code>`,
        `‚îú –ò–º—è: ${u.first_name || '‚Äî'}`,
        `‚îú –§–∞–º–∏–ª–∏—è: ${u.last_name || '‚Äî'}`,
        `‚îî Username: @${u.username || '‚Äî'}`,
        `‚îú –ó–∞–ø—Ä–æ—Å–æ–≤: ${u.request_count || 1}`,
        '',
        `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –≤–∫–ª—é—á–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ ${TIME_LIMIT_MINUTES} –º–∏–Ω—É—Ç.`,
    ].join('\n');

    if (inviteLink) {
        text += `\n\nüîó <b>–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞</b>`;
    }

    const kb = Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_${userId}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${userId}`),
    ]);

    try {
        const sent = await ctx.telegram.sendMessage(ADMIN_GROUP_ID, text, { parse_mode: 'HTML', ...kb });

        const prev = userRequests.get(userId) || {};
        userRequests.set(userId, {
            ...prev,
            adminMsg: { chatId: sent.chat.id, messageId: sent.message_id },
            status: 'pending'
        });
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ADMIN_GROUP_ID=${ADMIN_GROUP_ID}:`, e);
    }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ approve/reject ===
bot.action(/^(approve|reject)_(\d+)$/, async (ctx) => {
    if (ctx.chat?.id !== ADMIN_GROUP_ID) {
        return;
    }

    const admin = ctx.from;
    if (!isAdmin(admin.id)) {
        return ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!', { show_alert: true });
    }

    const [, action, targetIdStr] = ctx.match;
    const targetId = Number(targetIdStr);
    const userInfo = userRequests.get(targetId);
    if (!userInfo) {
        await removeAdminKeyboard(ctx, targetId);
        return ctx.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª.');
    }

    if (userInfo.status && userInfo.status !== 'pending') {
        await removeAdminKeyboard(ctx, targetId);
        return ctx.answerCbQuery(
            `–ó–∞—è–≤–∫–∞ —É–∂–µ ${userInfo.status === 'approved' ? '–æ–¥–æ–±—Ä–µ–Ω–∞' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}.`,
            { show_alert: true }
        );
    }

    await removeAdminKeyboard(ctx, targetId);
    
    if (action === 'approve') {
        userInfo.approved = true;
        userInfo.status = 'approved';
        userRequests.set(targetId, userInfo);

        const invite = await generateNewInviteLink(ctx, targetId);
        if (!invite?.invite_link) {
            return ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è ${userInfo.first_name || targetId}`);
        }

        await ctx.editMessageText(
            `‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç ${userInfo.first_name || targetId} –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${admin.first_name}\nüîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`
        );

        const successMsg = [
            'üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!',
            '',
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É!',
            '',
            '–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:',
            invite.invite_link,
            '',
            '‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>',
            '‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
            `‚Ä¢ –ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –≤ —Ç–µ—á–µ–Ω–∏–µ ${TIME_LIMIT_MINUTES} –º–∏–Ω—É—Ç!`,
            '‚Ä¢ –ò–Ω–∞—á–µ –≤—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω—ã',
            '',
            'üÜò –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ /start',
        ].join('\n');

        try {
            await ctx.telegram.sendMessage(targetId, successMsg, { parse_mode: 'HTML' });
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–∞–π—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', e);
            await ctx.telegram.sendMessage(admin.id, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${e.message || e}`);
        }
    } else {
        // reject
        userInviteLinks.delete(targetId);
        userInfo.approved = false;
        userInfo.status = 'rejected';
        userRequests.set(targetId, userInfo);

        await ctx.editMessageText(
            `‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç ${userInfo.first_name || targetId} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${admin.first_name}`
        );

        try {
            await ctx.telegram.sendMessage(
                targetId,
                '‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start'
            );
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', e);
        }
    }
});

// === –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ ===
bot.on(message('new_chat_members'), async (ctx) => {
    // –¢–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
    if (!ctx.chat || ctx.chat.id !== GROUP_ID) return;

    for (const member of ctx.message.new_chat_members) {
        if (member.is_bot) continue;

        const joinTime = new Date();
        userJoinTimes.set(member.id, joinTime);
        userFirstMessages.set(member.id, false);

        // –ø–æ–º–µ—Ç–∏–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
        const linkInfo = userInviteLinks.get(member.id);
        if (linkInfo) {
            linkInfo.used = true;
            linkInfo.used_at = new Date();
            userInviteLinks.set(member.id, linkInfo);
        }

        // —Ç–∞–π–º–µ—Ä –Ω–∞ –º–æ–ª—á–∞–Ω–∏–µ
        clearSilenceTimer(member.id);
        const handle = setTimeout(async () => {
            try {
                const wrote = userFirstMessages.get(member.id);
                if (!wrote) {
                    await banUserForSilence(ctx, member, joinTime);
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –º–æ–ª—á–∞–Ω–∏—è:', e);
            }
        }, TIME_LIMIT_MINUTES * 60 * 1000);
        silenceTimers.set(member.id, handle);

        await ctx.replyWithHTML(
            [
                `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href="tg://user?id=${member.id}">${escapeHtml(member.first_name || '–≥–æ—Å—Ç—å')}</a>!`,
                '',
                `‚ö†Ô∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ ${TIME_LIMIT_MINUTES} –º–∏–Ω—É—Ç.`,
                '',
                '‚è∞ –í—Ä–µ–º—è –ø–æ—à–ª–æ!',
            ].join('\n')
        );
    }
});

bot.command('whois', async (ctx) => {
    if (!isAdmin(ctx.message.from.id)) {
        return
    }

    const reply = ctx.message?.reply_to_message;
    const arg = (ctx.message?.text || '').split(/\s+/)[1]?.trim();
    let user = null;

    if (reply?.from) {
        user = reply.from;
    }

    if (!user && reply?.forward_from) {
        user = reply.forward_from;
    }

    if (!user && arg && /^\d+$/.test(arg)) {
        try {
            const member = await ctx.telegram.getChatMember(ctx.chat.id, Number(arg));
            user = member?.user || null;
        } catch (e) {
            // –Ω–µ –Ω–∞—à–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —é–∑–µ—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        }
    }

    if (!user) {
        return ctx.reply(
            [
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:',
                '‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ /whois –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                '‚Ä¢ –∏–ª–∏ /whois <user_id> (—á–∏—Å–ª–æ–º)',
                '',
                '–ü–æ–¥—Å–∫–∞–∑–∫–∞: @username –Ω–µ–ª—å–∑—è —Ä–µ–∑–æ–ª–≤–∏—Ç—å —á–µ—Ä–µ–∑ Bot API –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
            ].join('\n')
        );
    }

    await ctx.reply(
        [
            `ID: <code>${user.id}</code>`,
            `–ò–º—è: ${user.first_name || '‚Äî'} ${user.last_name || ''}`.trim(),
            `Username: @${user.username || '‚Äî'}`,
            `Is bot: ${user.is_bot ? 'yes' : 'no'}`
        ].join('\n'),
        { parse_mode: 'HTML' }
    );
})

bot.command('chatid', async (ctx) => {
    if (isAdmin(ctx.from.id)) {
        console.log('chat id', ctx.chat.id);
    }
})

// === –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ ===
bot.on('message', async (ctx) => {
    if (!ctx.chat || ctx.chat.id !== GROUP_ID) return;
    const user = ctx.from;
    if (!user || user.is_bot || isAdmin(user.id)) return;

    if (userFirstMessages.has(user.id) && userFirstMessages.get(user.id) === false) {
        userFirstMessages.set(user.id, true);
        const joinTime = userJoinTimes.get(user.id) || new Date();
        const diffMin = Math.max(0, (Date.now() - joinTime.getTime()) / 60000);

        // —Å–Ω—è—Ç—å —Ç–∞–π–º–µ—Ä
        clearSilenceTimer(user.id);

        await ctx.replyWithHTML(
            [
                `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, <a href="tg://user?id=${user.id}">${escapeHtml(user.first_name || '–≥–æ—Å—Ç—å')}</a>!`,
                '',
                `‚è± –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${diffMin.toFixed(1)} –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è.`,
                'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!',
            ].join('\n')
        );

        userJoinTimes.delete(user.id);
    }
});

// === –ö–æ–º–∞–Ω–¥–∞ /reset –≤ –ª–∏—á–∫–µ ===
bot.command('reset', async (ctx) => {
    const user = ctx.from;
    userRequests.delete(user.id);
    userInviteLinks.delete(user.id);
    clearSilenceTimer(user.id);
    ctx.reply('üîÑ –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π.');
});

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
function clearSilenceTimer(userId) {
    const t = silenceTimers.get(userId);
    if (t) {
        clearTimeout(t);
        silenceTimers.delete(userId);
    }
}

async function removeAdminKeyboard(ctx, userId) {
  const rec = userRequests.get(userId);
  const msg = rec?.adminMsg;
  if (!msg) return;

  try {
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await ctx.telegram.editMessageReplyMarkup(msg.chatId, msg.messageId, undefined, undefined);

    // –í–∞—Ä–∏–∞–Ω—Ç 2 (–Ω–∞ —Å–ª—É—á–∞–π –∫–∞–ø—Ä–∏–∑–æ–≤ API): —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    // await ctx.telegram.editMessageReplyMarkup(msg.chatId, msg.messageId, undefined, { inline_keyboard: [] });
  } catch (e) {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ/—É–¥–∞–ª–µ–Ω–æ ‚Äì –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    // console.warn('removeAdminKeyboard error:', e?.description || e);
  }
}

async function banUserForSilence(ctx, user, joinTime) {
    try {
        const until = Math.floor((Date.now() + 24 * 3600 * 1000) / 1000); // +1 –¥–µ–Ω—å
        await ctx.telegram.banChatMember(GROUP_ID, user.id, { until_date: until });

        await ctx.telegram.sendMessage(
            GROUP_ID,
            [
                `üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id=${user.id}">${escapeHtml(user.first_name || user.id)}</a> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.`,
                '',
                `‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ù–µ –Ω–∞–ø–∏—Å–∞–ª –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ ${TIME_LIMIT_MINUTES} –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è.`,
                `‚è∞ <b>–í—Ä–µ–º—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b> ${joinTime.toLocaleTimeString('ru-RU')}`,
            ].join('\n'),
            { parse_mode: 'HTML' }
        );


        try {
            await ctx.telegram.sendMessage(
                ADMIN_GROUP_ID,
                `üö´ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω: ${user.first_name || user.id} (ID: ${user.id}) –∑–∞ –º–æ–ª—á–∞–Ω–∏–µ`
            );
        } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ADMIN_GROUP_ID=${ADMIN_GROUP_ID}:`, e);
        }


        userJoinTimes.delete(user.id);
        userFirstMessages.delete(user.id);
        userInviteLinks.delete(user.id);
        clearSilenceTimer(user.id);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
    }
}

function escapeHtml(s) {
    return String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}


try {
    bot.launch();
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Telegraf, polling).');

    await bot.telegram.setMyCommands(
        [{ command: 'start', description: '–ù–∞—á–∞—Ç—å' }],
        { scope: { type: 'all_private_chats' } }
    );

    await bot.telegram.setMyCommands(
        [
            { command: 'start', description: '–ù–∞—á–∞—Ç—å' },
            { command: 'whois', description: '–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (reply –∏–ª–∏ /whois <id>)' },
            { command: 'chatid', description: '–ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞' },
        ],
        { scope: { type: 'chat', chat_id: ADMIN_GROUP_ID } }
    );
} catch (e) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞', e);
}



// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
