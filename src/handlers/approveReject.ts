import { userInviteLinks, userRequests } from "../core";
import type { ActionContext } from "../types";
import {
  ADMIN_GROUP_ID,
  GROUP_ID,
  isAdmin,
  TIME_LIMIT_MINUTES,
} from "../utils";
import { closeAdminRequest } from "../utils/closeAdminRequest";
import { generateNewInviteLink } from "../utils/generateNewInviteLink";
import { pluralizeMinutesGenitive } from "../utils/pluralizeMinutes";

// eslint-disable-next-line sonarjs/cognitive-complexity
export const approveReject = async (ctx: ActionContext) => {
  const user = ctx.from;
  const chat = ctx.chat;

  if (!user) return;
  if (!chat || chat.type !== "private") return;

  if (ctx.chat?.id !== ADMIN_GROUP_ID) {
    return;
  }

  const admin = ctx.from;
  if (!isAdmin(admin.id)) {
    return ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", {
      show_alert: true,
    });
  }

  const [, action, targetIdStr] = ctx.match;
  const targetId = Number(targetIdStr);
  const userInfo = userRequests.get(targetId);

  if (!userInfo) {
    return ctx.editMessageText("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª.");
  }

  if (userInfo.status && userInfo.status !== "pending") {
    return ctx.answerCbQuery(
      `–ó–∞—è–≤–∫–∞ —É–∂–µ ${userInfo.status === "approved" ? "–æ–¥–æ–±—Ä–µ–Ω–∞" : "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"}.`,
      { show_alert: true },
    );
  }

  if (action === "approve") {
    userInfo.approved = true;
    userInfo.status = "approved";
    userRequests.set(targetId, userInfo);

    const invite = await generateNewInviteLink(
      ctx,
      targetId,
      GROUP_ID,
      userInviteLinks,
    );
    if (!invite?.invite_link) {
      return ctx.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è ${userInfo.first_name || targetId}`,
      );
    }

    await closeAdminRequest(
      ctx,
      targetId,
      userRequests,
      `‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç ${userInfo.first_name || targetId} –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${admin.first_name}\nüîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`,
    );

    const successMsg = [
      "üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!",
      "",
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É!",
      "",
      "–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
      invite.invite_link,
      "",
      "‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>",
      "‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
      `‚Ä¢ –ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –≤ —Ç–µ—á–µ–Ω–∏–µ ${pluralizeMinutesGenitive(TIME_LIMIT_MINUTES)}!`,
      "‚Ä¢ –ò–Ω–∞—á–µ –≤—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω—ã",
      "",
      "üÜò –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ /start",
    ].join("\n");

    try {
      await ctx.telegram.sendMessage(targetId, successMsg, {
        parse_mode: "HTML",
      });
    } catch (e) {
      const err = e as Error;
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–∞–π—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", e);

      await ctx.telegram.sendMessage(
        ADMIN_GROUP_ID,
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${err.message || e}`,
      );
    }
  } else {
    // reject
    userInviteLinks.delete(targetId);
    userInfo.approved = false;
    userInfo.status = "rejected";
    userRequests.set(targetId, userInfo);

    await closeAdminRequest(
      ctx,
      targetId,
      userRequests,
      `‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç ${userInfo.first_name || targetId} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${admin.first_name}`,
    );

    try {
      await ctx.telegram.sendMessage(
        targetId,
        "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
      );
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:", e);

      await ctx.telegram.sendMessage(
        ADMIN_GROUP_ID,
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏`,
      );
    }
  }
};
